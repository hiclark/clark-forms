// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<DateRangePicker /> no label renders correctly 1`] = `
<date-range-picker__Container>
  <Field
    columns={2}
    component={[Function]}
    name="Name"
    onCheckboxClick={[Function]}
    value={false}
  />
</date-range-picker__Container>
`;

exports[`<DateRangePicker /> renders correctly 1`] = `
<date-range-picker__Container>
  <Label
    disabled={false}
    label="Label"
    labelHint={null}
    name="Name"
  />
  <Field
    columns={2}
    component={[Function]}
    name="Name"
    onCheckboxClick={[Function]}
    openDirection="up"
    value={false}
  />
</date-range-picker__Container>
`;

exports[`DateRangePickerField renders correctly 1`] = `
<div>
  <withStyles(DateRangePicker)
    anchorDirection="left"
    appendToBody={false}
    block={false}
    calendarInfoPosition="bottom"
    customArrowIcon={null}
    customCloseIcon={null}
    customInputIcon={<calendar.svg />}
    daySize={39}
    disableScroll={false}
    disabled={false}
    displayFormat="M/D/YY"
    enableOutsideDays={false}
    endDate={null}
    endDateId="endDate"
    endDatePlaceholderText="End"
    firstDayOfWeek={null}
    focusedInput={null}
    hideKeyboardShortcutsPanel={true}
    horizontalMargin={0}
    initialVisibleMonth={null}
    inputIconPosition="before"
    isDayBlocked={[Function]}
    isDayHighlighted={[Function]}
    isOutsideRange={[Function]}
    isRTL={false}
    keepFocusOnInput={false}
    keepOpenOnDateSelect={false}
    minimumNights={1}
    monthFormat="MMMM YYYY"
    navNext={null}
    navPrev={null}
    noBorder={false}
    numberOfMonths={2}
    onClose={[Function]}
    onDatesChange={[Function]}
    onFocusChange={[Function]}
    onNextMonthClick={[Function]}
    onPrevMonthClick={[Function]}
    openDirection="down"
    orientation="horizontal"
    phrases={
      Object {
        "calendarLabel": "Calendar",
        "chooseAvailableEndDate": [Function],
        "chooseAvailableStartDate": [Function],
        "clearDates": "Clear Dates",
        "closeDatePicker": "Close",
        "dateIsSelected": [Function],
        "dateIsUnavailable": [Function],
        "enterKey": "Enter key",
        "escape": "Escape key",
        "focusStartDate": "Interact with the calendar and add the check-in date for your trip.",
        "hideKeyboardShortcutsPanel": "Close the shortcuts panel.",
        "homeEnd": "Home and end keys",
        "jumpToNextMonth": "Move forward to switch to the next month.",
        "jumpToPrevMonth": "Move backward to switch to the previous month.",
        "keyboardNavigationInstructions": "Press the down arrow key to interact with the calendar and
        select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
        "keyboardShortcuts": "Keyboard Shortcuts",
        "leftArrowRightArrow": "Right and left arrow keys",
        "moveFocusByOneDay": "Move backward (left) and forward (right) by one day.",
        "moveFocusByOneMonth": "Switch months.",
        "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week.",
        "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week.",
        "openThisPanel": "Open this panel.",
        "pageUpPageDown": "page up and page down keys",
        "questionMark": "Question mark",
        "returnFocusToInput": "Return to the date input field.",
        "selectFocusedDate": "Select the date in focus.",
        "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel.",
        "upArrowDownArrow": "up and down arrow keys",
      }
    }
    readOnly={false}
    regular={false}
    renderCalendarInfo={null}
    renderDayContents={null}
    renderMonth={null}
    reopenPickerOnClearDates={false}
    required={false}
    screenReaderInputMessage=""
    showClearDates={false}
    showDefaultInputIcon={false}
    small={false}
    startDate={null}
    startDateId="startDate"
    startDatePlaceholderText="Start"
    verticalHeight={null}
    verticalSpacing={22}
    weekDayFormat="dd"
    withFullScreenPortal={false}
    withPortal={false}
  />
  <Error
    error={false}
    touched={false}
  />
</div>
`;
